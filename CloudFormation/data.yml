Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    PostgresDBName:
        Description: The name of the Database
        Type: String
    DBUsername:
        NoEcho: 'true'
        Description: Username for PostgresSQL database access
        Type: String
        MinLength: '1'
        MaxLength: '16'
        AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
        ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    DBPassword:
        NoEcho: 'true'
        Description: Password PostgresSQL database access
        Type: String
        MinLength: '8'
        MaxLength: '41'
        AllowedPattern: '[a-zA-Z0-9]*'
        ConstraintDescription: must contain only alphanumeric characters.
Resources:
    PostgresDBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            # A description for the security group
            # String
            GroupDescription: Allow http to/from our elastic load balancer
            # The name of the security group
            # GroupName: String
            # The inbound rules associated with the security group
            SecurityGroupIngress: 
            - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0
            # Any tags assigned to the security group
            #Tags: 
            #  - Tag
            # The ID of the VPC for the security group
            # String
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"


    PostgresDBSubnetGroup: 
        Type: "AWS::RDS::DBSubnetGroup"
        Properties: 
            DBSubnetGroupDescription: This associates the two private subnets with the RDS DB
            SubnetIds: 
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRI1-SN"
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRI2-SN"


    # Only the Ionic Web App and REST API are allowed to access this DB
    PostgresDB:
        Type: AWS::RDS::DBInstance
        DependsOn: PostgresDBSubnetGroup
        Properties:
            DBSecurityGroups:
                - Ref: PostgresDBSecurityGroup
            DBSubnetGroupName: !Ref PostgresDBSubnetGroup
            AllocatedStorage: '20'
            DBInstanceClass: db.t2.micro
            Engine: postgres
            DBInstanceIdentifier: !Ref PostgresDBName
            MasterUsername: ${DBUserName}
            MasterUserPassword: ${DBPassword}
            DBName: !Sub "${EnvironmentName}-RDS"


    # Access to the bucket will be with Signed URLs only
    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            CorsConfiguration:
                CorsRules:
                - AllowedHeaders: ['*']
                  AllowedMethods: [GET, POST, PUT, DELETE, HEAD]
                  AllowedOrigins: ['*']
                  MaxAge: '3600'


Outputs:
    BucketName:
        Value: !Ref 'S3Bucket'
        Description: Name of the Amazon S3 bucket used to store image files.
