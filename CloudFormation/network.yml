Description:
  Daniel Salazar | May 2020

  This is going to be used to create the VPC, Subnets, NAT Gateways, and Route Tables
  This will be the underlying infrastructure for the rest of the Operations.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      # Any tags to assign to the internet gateway
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      # The ID of the internet gateway
      # String
      InternetGatewayId: !Ref InternetGateway
      # The ID of the VPC
      # String
      VpcId: !Ref VPC
      # The ID of the virtual private gateway
      #VpnGatewayId: String

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      # Indicates whether a network interface created in this subnet receives an IPv6 address
      #AssignIpv6AddressOnCreation: Boolean
      # The Availability Zone of the subnet
      # String
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      # The IPv4 CIDR block assigned to the subnet
      # String
      CidrBlock: !Ref PublicSubnet1CIDR
      # The IPv6 CIDR block
      #Ipv6CidrBlock: String
      # Indicates whether instances launched in this subnet receive a public IPv4 address
      # Boolean
      MapPublicIpOnLaunch: true
      # Any tags assigned to the subnet
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
      # The ID of the VPC the subnet is in
      # String
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      # Indicates whether a network interface created in this subnet receives an IPv6 address
      #AssignIpv6AddressOnCreation: Boolean
      # The Availability Zone of the subnet
      # String
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      # The IPv4 CIDR block assigned to the subnet
      # String
      CidrBlock: !Ref PublicSubnet2CIDR
      # The IPv6 CIDR block
      #Ipv6CidrBlock: String
      # Indicates whether instances launched in this subnet receive a public IPv4 address
      # Boolean
      MapPublicIpOnLaunch: true
      # Any tags assigned to the subnet
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
      # The ID of the VPC the subnet is in
      # String
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      # Indicates whether a network interface created in this subnet receives an IPv6 address
      #AssignIpv6AddressOnCreation: Boolean
      # The Availability Zone of the subnet
      # String
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      # The IPv4 CIDR block assigned to the subnet
      # String
      CidrBlock: !Ref PrivateSubnet1CIDR
      # The IPv6 CIDR block
      #Ipv6CidrBlock: String
      # Indicates whether instances launched in this subnet receive a public IPv4 address
      # Boolean
      MapPublicIpOnLaunch: false
      # Any tags assigned to the subnet
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
      # The ID of the VPC the subnet is in
      # String
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      # Indicates whether a network interface created in this subnet receives an IPv6 address
      #AssignIpv6AddressOnCreation: Boolean
      # The Availability Zone of the subnet
      # String
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      # The IPv4 CIDR block assigned to the subnet
      # String
      CidrBlock: !Ref PrivateSubnet2CIDR
      # The IPv6 CIDR block
      #Ipv6CidrBlock: String
      # Indicates whether instances launched in this subnet receive a public IPv4 address
      # Boolean
      MapPublicIpOnLaunch: false
      # Any tags assigned to the subnet
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
      # The ID of the VPC the subnet is in
      # String
      VpcId: !Ref VPC

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties: 
      # The allocation ID of an Elastic IP address to associate with the NAT gateway
      # String
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      # The public subnet in which to create the NAT gateway
      SubnetId: !Ref PublicSubnet1
      # The tags (key-value pairs) to associate with this resource
      #Tags: 
      #  - Tag

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      # Set to vpc to allocate the address for use with instances in a VPC
      # String
      Domain: vpc
      # The ID of the instance
      #InstanceId: String
      # The ID of an address pool that you own
      #PublicIpv4Pool: String
      # Any tags assigned to the Elastic IP address
      #Tags: 
      #  - Tag

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      # The allocation ID of an Elastic IP address to associate with the NAT gateway
      # String
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      # The public subnet in which to create the NAT gateway
      SubnetId: !Ref PublicSubnet2
      # The tags (key-value pairs) to associate with this resource
      #Tags: 
      #  - Tag

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      # Set to vpc to allocate the address for use with instances in a VPC
      # String
      Domain: vpc
      # The ID of the instance
      #InstanceId: String
      # The ID of an address pool that you own
      #PublicIpv4Pool: String
      # Any tags assigned to the Elastic IP address
      #Tags: 
      #  - Tag


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ELBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # A description for the security group
      # String
      GroupDescription: Allow http to/from our elastic load balancer
      # The name of the security group
      #GroupName: String
      # The outbound rules associated with the security group
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      # The inbound rules associated with the security group
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      # Any tags assigned to the security group
      #Tags: 
      #  - Tag
      # The ID of the VPC for the security group
      # String
      VpcId: 
        !Ref VPC

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Indicates whether health checks are enabled
      #HealthCheckEnabled: Boolean
      # The approximate amount of time, in seconds, between health checks of an individual target
      HealthCheckIntervalSeconds: 10
      # The ping path that is the destination on the targets for health checks
      HealthCheckPath: /
      # The port the load balancer uses when performing health checks on targets
      #HealthCheckPort: String
      # The protocol the load balancer uses when performing health checks on targets
      HealthCheckProtocol: HTTP
      # The amount of time, in seconds, during which no response from a target means a failed health check
      HealthCheckTimeoutSeconds: 8
      # The number of consecutive health checks successes required before considering an unhealthy target healthy
      HealthyThresholdCount: 2
      # The HTTP codes to use when checking for a successful response from a target
      #Matcher: 
      #  Matcher
      # This name must be unique per region per account, can have a maximum of #
      # 32 characters, must contain only alphanumeric characters or hyphens, and
      # must not begin or end with a hyphen
      #Name: String
      # The port on which the targets receive traffic
      Port: 8080
      # The protocol to use for routing traffic to the targets
      Protocol: HTTP
      # The tags
      #Tags: 
      #  - Tag
      # The attributes
      #TargetGroupAttributes: 
      #  - TargetGroupAttribute
      # The targets
      #Targets: 
      #  - TargetDescription
      # The type of target that you must specify when registering targets with this target group
      #TargetType: String
      # The number of consecutive health check failures required before considering a target unhealthy
      UnhealthyThresholdCount: 5
      # The identifier of the virtual private cloud
      VpcId: 
        !Ref VPC

  NetworkLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      # The IP address type
      #IpAddressType: String
      # The load balancer attributes
      #LoadBalancerAttributes: 
      #  - LoadBalancerAttribute
      # he name of the load balancer
      #Name: String
      # The nodes of an Internet-facing load balancer have public IP addresses
      # The nodes of an internal load balancer have only private IP addresses
      #Scheme: String
      # The IDs of the security groups for the load balancer
      SecurityGroups:
      - Ref: ELBSecGroup
      # The IDs of the public subnets
      #SubnetMappings: 
      #  - SubnetMapping
      # The IDs of the subnets
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      # One or more tags to assign to the load balancer
      #Tags: 
      #  - Tag
      # The type of load balancer
      #Type: String

Outputs: 
  VPC: 
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  VPCPublicRouteTable:
    Description: Public Routing
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPrivateRouteTable1:
    Description: Private Routing AZ1
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-RT

  VPCPrivateRouteTable2:
    Description: Private Routing AZ2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-RT

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN

  PublicSubnet2: 
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-SN

  PrivateSubnet2: 
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-SN

  NetworkLB:
    Description: The ARN of the LoadBalancer.
    Value: !Ref NetworkLB
    Export:
        Name: !Sub ${EnvironmentName}-LB

  LoadBalancerDNS:
    Description: The URL of the LoadBalancer
    Value: !GetAtt [NetworkLB, DNSName]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNS