Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  RootUserARN:
    Description: The arn of the root user
    Type: String
  MainUserARN:
    Description: The arn of the main user
    Type: String
  IAMPassword:
    NoEcho: 'true'
    Type: String
    Description: New account password
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: the password must be between 1 and 41 characters
  KubeIAMPassword:
    NoEcho: 'true'
    Type: String
    Description: New account password
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: the password must be between 1 and 41 characters

Resources:
  JenkinsIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Groups:
        - !Ref JenkinsIAMGroup
      # The friendly name (not ARN) identifying the policy
      PolicyName: JenkinsIAMUsers
      # Adds full access to S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: s3:*
          Resource: '*'
        - Effect: Allow
          Action: rds:*
          Resource: '*'
        - Effect: Allow
          Action: lambda:*
          Resource: '*'

  JenkinsIAMUser:
    Type: AWS::IAM::User
    Properties:
        # Creates a password for the specified user, giving the user the
        # ability to access AWS services through the AWS Management Console
        LoginProfile:
            Password: !Ref 'IAMPassword'
    
  JenkinsIAMGroup:
    Type: AWS::IAM::Group

  JenkinsIAMUsers:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
        # The name of the group to update
        GroupName: !Ref 'JenkinsIAMGroup'
        # A list of the names of the users that you want to add to the group
        Users: 
        - !Ref 'JenkinsIAMUser'

  JenkinsIAMKeys:
    Type: AWS::IAM::AccessKey
    Properties:
        UserName: !Ref 'JenkinsIAMUser'

  KubeIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Groups:
        - !Ref KubeIAMGroup
      # The friendly name (not ARN) identifying the policy
      PolicyName: KubeIAMUsers
      # Adds full access to S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - iam:*
          - s3:*
          - route53:*
          - ec2:*
          - cloudformation:*
          Resource: "*"

  KubeIAMUser:
    Type: AWS::IAM::User
    Properties:
      # Creates a password for the specified user, giving the user the
      # ability to access AWS services through the AWS Management Console
      LoginProfile:
          Password: !Ref 'KubeIAMPassword'
    
  KubeIAMGroup:
    Type: AWS::IAM::Group

  KubeIAMUsers:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      # The name of the group to update
      GroupName: !Ref 'KubeIAMGroup'
      # A list of the names of the users that you want to add to the group
      Users: 
      - !Ref 'KubeIAMUser'

  KubeKMSKey:
    Type: AWS::KMS::Key
    Properties: 
      # A description of the CMK
      Description: Encryption key for Kubernetes Operations.
      # Specifies whether the customer master key (CMK) is enabled
      Enabled: true
      # Determines the cryptographic operations for which you can use the CMK
      #KeyUsage: String
      # Specifies the number of days in the waiting period before AWS KMS 
      # deletes a CMK that has been removed from a CloudFormation stack
      #PendingWindowInDays: Integer
      Tags: 
        - Key: KubeKMSKey
          Value: KubeKMSKey
      # Enables automatic rotation of the key material for the specified customer master key 
      #EnableKeyRotation: Boolean
      KeyPolicy: 
          Id: key-consolepolicy-3
          Version: '2012-10-17'
          Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Ref RootUserARN
            Action: kms:*
            Resource: "*"
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Ref MainUserARN
            Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:TagResource
            - kms:UntagResource
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
              - !GetAtt [JenkinsIAMUser, Arn]
              - !GetAtt [KubeIAMUser, Arn]
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: "*"
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt [JenkinsIAMUser, Arn]
                - !GetAtt [KubeIAMUser, Arn]
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RevokeGrant
            Resource: "*"
            Condition:
              Bool:
                kms:GrantIsForAWSResource: 'true'
          
          

Outputs:
  JenkinsAccessKey:
    Value: !Ref 'JenkinsIAMKeys'
    Description: AWSAccessKeyId of  user
  JenkinsSecretKey:
    Value: !GetAtt [JenkinsIAMKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of  user
  KubeKMSKeyID:
    Value: !Ref KubeKMSKey
    Description: KMS Key for KOPS
    Export:
      Name: !Sub ${EnvironmentName}-KMS