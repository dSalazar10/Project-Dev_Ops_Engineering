Description:
  Daniel Salazar | June 2020
  This will create an EC2 instance and install Jenkins. The security group's CIDR IP should be changed to the IP of
  the dev computer. This is used as an automation server to automate the tasks associated with CI/CD. 
  
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String


Resources:
  JenkinsHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-003634241a8fcdec0 # Ubuntu
      # Ideally you want to only put the key during the time that you execute
      # this script. Remove it immediately after
      # Remember: If you push this, the key name will be public
      KeyName: jenkins-key
      SubnetId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PRI1-SN"
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install Docker
          sudo apt-get update && curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
          wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
          sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
          sudo apt-get update && sudo apt-get install -y default-jre 
          sudo apt-get update && sudo apt-get install -y nginx
          sudo apt-get update && sudo apt-get install -y jenkins
          sudo systemctl start jenkins

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # A description for the security group
      # String
      GroupDescription: Allow ssh to/from our Jenkins host
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      # The name of the security group
      # GroupName: String
      # The inbound rules associated with the security group
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0 # Change this to my IP Address
      # Any tags assigned to the security group
      #Tags: 
      #  - Tag
      # The ID of the VPC for the security group
      # String
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

  ELBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # A description for the security group
      # String
      GroupDescription: Allow http to/from our elastic load balancer
      # The name of the security group
      #GroupName: String
      # The outbound rules associated with the security group
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # The inbound rules associated with the security group
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # Any tags assigned to the security group
      #Tags: 
      #  - Tag
      # The ID of the VPC for the security group
      # String
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
  
  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      # Indicates whether health checks are enabled
      #HealthCheckEnabled: Boolean
      # The approximate amount of time, in seconds, between health checks of an individual target
      HealthCheckIntervalSeconds: 10
      # The ping path that is the destination on the targets for health checks
      HealthCheckPath: /
      # The port the load balancer uses when performing health checks on targets
      #HealthCheckPort: String
      # The protocol the load balancer uses when performing health checks on targets
      HealthCheckProtocol: HTTP
      # The amount of time, in seconds, during which no response from a target means a failed health check
      HealthCheckTimeoutSeconds: 8
      # The number of consecutive health checks successes required before considering an unhealthy target healthy
      HealthyThresholdCount: 2
      # The HTTP codes to use when checking for a successful response from a target
      #Matcher: 
      #  Matcher
      # This name must be unique per region per account, can have a maximum of #
      # 32 characters, must contain only alphanumeric characters or hyphens, and
      # must not begin or end with a hyphen
      #Name: String
      # The port on which the targets receive traffic
      Port: 8080
      # The protocol to use for routing traffic to the targets
      Protocol: HTTP
      # The tags
      #Tags: 
      #  - Tag
      # The attributes
      #TargetGroupAttributes: 
      #  - TargetGroupAttribute
      # The targets
      #Targets: 
      #  - TargetDescription
      # The type of target that you must specify when registering targets with this target group
      #TargetType: String
      # The number of consecutive health check failures required before considering a target unhealthy
      UnhealthyThresholdCount: 5
      # The identifier of the virtual private cloud
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      # The default SSL server certificate for a secure listener
      #Certificates: 
      #  - Certificate
      # The actions for the default rule
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: JenkinsTargetGroup
      # The Amazon Resource Name (ARN) of the load balancer
      LoadBalancerArn:
        Ref: JenkinsLB
      # The port on which the load balancer is listening
      Port: '80'
      # The protocol for connections from clients to the load balancer
      Protocol: HTTP
      # The security policy that defines which protocols and ciphers are supported
      #SslPolicy: String

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      # The rule must include exactly one of the following types of actions: 
      # forward, fixed-response, or redirect, and it must be the last action to be performed
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'JenkinsTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
      # The rule can optionally include up to one of each of the following conditions: 
      # http-request-method, host-header, path-pattern, and source-ip
      #Conditions: 
      #  - RuleCondition
      # The Amazon Resource Name (ARN) of the listener
      #ListenerArn: String
      # The rule priority. A listener can't have multiple rules with the same priority
      #Priority: Integer

  JenkinsLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      # The IP address type
      #IpAddressType: String
      # The load balancer attributes
      #LoadBalancerAttributes: 
      #  - LoadBalancerAttribute
      # he name of the load balancer
      #Name: String
      # The nodes of an Internet-facing load balancer have public IP addresses
      # The nodes of an internal load balancer have only private IP addresses
      #Scheme: String
      # The IDs of the security groups for the load balancer
      SecurityGroups:
      - Ref: ELBSecGroup
      # The IDs of the public subnets
      #SubnetMappings: 
      #  - SubnetMapping
      # The IDs of the subnets
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      # One or more tags to assign to the load balancer
      #Tags: 
      #  - Tag
      # The type of load balancer
      #Type: String

Outputs:
  JenkinsServer:
    Description: The URL Associated with the Jenkins Server
    Value: !GetAtt JenkinsLB.DNSName
  JenkinsIP:
    Description: The Private IP Address of the Jenkins host
    Value:  !GetAtt [JenkinsHost, PrivateIp]
    Export:
      Name: !Sub ${EnvironmentName}-J-IP